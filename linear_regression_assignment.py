# -*- coding: utf-8 -*-
"""linear-regression-assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/NairaAhmedAI/05bfae67701db6648dd09ab49311ca15/linear-regression-assignment.ipynb
"""

# import all the lib
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# read the dataset using pandas
data = pd.read_csv('Salary_Data.csv')

# This displays the top 5 rows of the data
data.head()

# Provides some information regarding the columns in the data
data.info()

# this describes the basic stat behind the dataset used
data.describe()

# These Plots help to explain the values and how they are scattered

# Plot a scatter plot


# Create a scatter plot
plt.figure(figsize=(8, 5))  # Set figure size
sns.scatterplot(x=data['YearsExperience'], y=data['Salary'], color='b', label='Data Points')

# Add labels and title
plt.xlabel('Years of Experience')  # Label for X-axis
plt.ylabel('Salary')  # Label for Y-axis
plt.title('Scatter Plot of Experience vs Salary')  # Title of the plot

# Show the legend and grid
plt.legend()
plt.grid(True)

# Display the plot
plt.show()

# Cooking the data
X = data['YearsExperience']
X.head()

# Cooking the data
y = data['Salary']
y.head()

# Split the data for train and test (70% for training)
from sklearn.model_selection import train_test_split
# Define features (X) and target (y)
X = data[['YearsExperience']]  # Independent variable
y = data['Salary']  # Dependent variable
# Split the dataset into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Convert X_train and X_test to NumPy arrays
X_train = X_train.values.reshape(-1, 1)
X_test = X_test.values.reshape(-1, 1)

# Importing Linear Regression model from scikit learn

from sklearn.linear_model import LinearRegression
model = LinearRegression()

# Fitting the model
# Train the Linear Regression model using the training data
model.fit(X_train, y_train)
# Print the model coefficients
print("Intercept (b0):", model.intercept_)
print("Slope (b1):", model.coef_[0])

# Predicting the Salary for the Test values

y_pred = model.predict(X_test)

# Plotting the actual and predicted values

c = [i for i in range (1,len(y_test)+1,1)]
plt.plot(c,y_test,color='r',linestyle='-')
plt.plot(c,y_pred,color='b',linestyle='-')
plt.xlabel('Salary')
plt.ylabel('index')
plt.title('Prediction')
plt.show()

# plotting the error
c = [i for i in range(1,len(y_test)+1,1)]
plt.plot(c,y_test-y_pred,color='green',linestyle='-')
plt.xlabel('index')
plt.ylabel('Error')
plt.title('Error Value')
plt.show()

# Importing r2_score and mean_squared_error for the evaluation of the model

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)

# calculate Mean square error
from sklearn.metrics import mean_squared_error
# Compute MSE between actual and predicted salary values
mse = mean_squared_error(y_test, y_pred)
# Print the Mean Squared Error
print(f"Mean Squared Error (MSE): {mse:.2f}")

# Calculate R square vale
r2 = r2_score(y_test, y_pred)

# Print the R² Score
print(f"R² Score: {r2:.2f}")

# Just plot actual and predicted values for more insights
plt.figure(figsize=(12,6))
plt.scatter(y_test,y_pred,color='r',linestyle='-')
plt.show()

# Intercept and coefficient of the regression line
print('Intercept of the model:', model.intercept_)  # The bias term (b0)
print('Coefficient of the line:', model.coef_[0])  # The slope (b1)

"""![](http://)Then it is said to form a line with
# y = 25202.8 + 9731.2x
"""